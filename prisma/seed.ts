import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// Helper function to generate random placehold.co images
function generateRandomImage() {
  const widths = [800, 900, 1000, 1200];
  const heights = [400, 500, 600, 700];
  const colors = ['FF6B6B', '4ECDC4', '45B7D1', 'FFA07A', '98D8C8', 'F7DC6F', 'BB8FCE', '85C1E9'];
  const texts = [
    'Event+Photo',
    'Beautiful+Moment',
    'Great+Times',
    'Memories',
    'Fun+Event',
    'Amazing+Day',
    'Special+Moment',
    'Good+Vibes'
  ];

  const width = widths[Math.floor(Math.random() * widths.length)];
  const height = heights[Math.floor(Math.random() * heights.length)];
  const bgColor = colors[Math.floor(Math.random() * colors.length)];
  const textColor = 'FFFFFF';
  const text = texts[Math.floor(Math.random() * texts.length)];

  return {
    url: `https://placehold.co/${width}x${height}/${bgColor}/${textColor}?text=${text}`,
    width,
    height
  };
}

async function main() {
  console.log('üå± Starting seed...');

  // Create categories
  const categories = await Promise.all([
    prisma.category.upsert({
      where: { name: 'Technology' },
      update: {},
      create: {
        name: 'Technology',
        description: 'Tech meetups, conferences, and workshops',
        color: '#3B82F6',
        icon: 'laptop'
      }
    }),
    prisma.category.upsert({
      where: { name: 'Sports' },
      update: {},
      create: {
        name: 'Sports',
        description: 'Sports events and activities',
        color: '#10B981',
        icon: 'sports'
      }
    }),
    prisma.category.upsert({
      where: { name: 'Social' },
      update: {},
      create: {
        name: 'Social',
        description: 'Social gatherings and networking',
        color: '#F59E0B',
        icon: 'users'
      }
    }),
    prisma.category.upsert({
      where: { name: 'Education' },
      update: {},
      create: {
        name: 'Education',
        description: 'Learning and educational events',
        color: '#8B5CF6',
        icon: 'book'
      }
    }),
    prisma.category.upsert({
      where: { name: 'Food & Drink' },
      update: {},
      create: {
        name: 'Food & Drink',
        description: 'Culinary experiences and tastings',
        color: '#EF4444',
        icon: 'utensils'
      }
    }),
    prisma.category.upsert({
      where: { name: 'Arts & Culture' },
      update: {},
      create: {
        name: 'Arts & Culture',
        description: 'Art exhibitions, cultural events',
        color: '#EC4899',
        icon: 'palette'
      }
    })
  ]);

  console.log('‚úÖ Created categories:', categories.map(c => c.name));

  // Create tags
  const tags = await Promise.all([
    prisma.tag.upsert({
      where: { name: 'networking' },
      update: {},
      create: { name: 'networking' }
    }),
    prisma.tag.upsert({
      where: { name: 'beginner-friendly' },
      update: {},
      create: { name: 'beginner-friendly' }
    }),
    prisma.tag.upsert({
      where: { name: 'free' },
      update: {},
      create: { name: 'free' }
    }),
    prisma.tag.upsert({
      where: { name: 'workshop' },
      update: {},
      create: { name: 'workshop' }
    }),
    prisma.tag.upsert({
      where: { name: 'outdoor' },
      update: {},
      create: { name: 'outdoor' }
    }),
    prisma.tag.upsert({
      where: { name: 'premium' },
      update: {},
      create: { name: 'premium' }
    })
  ]);

  console.log('‚úÖ Created tags:', tags.map(t => t.name));

  // Ensure the main user exists
  const mainUser = await prisma.user.upsert({
    where: { id: 'cmexdecb10000c9xb76gmgm9b' },
    update: {},
    create: {
      id: 'cmexdecb10000c9xb76gmgm9b',
      email: 'ayaz2589@gmail.com',
      name: 'Ayaz Uddin',
      image: 'https://placehold.co/100x100/4F46E5/FFFFFF?text=AU'
    }
  });

  // Create dummy users
  const dummyUsers = await Promise.all([
    prisma.user.upsert({
      where: { email: 'john.doe@example.com' },
      update: {},
      create: {
        email: 'john.doe@example.com',
        name: '‡¶ú‡¶® ‡¶¶‡¶æ‡¶∏',
        image: 'https://placehold.co/100x100/10B981/FFFFFF?text=JD'
      }
    }),
    prisma.user.upsert({
      where: { email: 'jane.smith@example.com' },
      update: {},
      create: {
        email: 'jane.smith@example.com',
        name: '‡¶ú‡ßá‡¶®‡¶ø‡¶´‡¶æ‡¶∞ ‡¶∂‡¶∞‡ßç‡¶Æ‡¶æ',
        image: 'https://placehold.co/100x100/F59E0B/FFFFFF?text=JS'
      }
    }),
    prisma.user.upsert({
      where: { email: 'mike.wilson@example.com' },
      update: {},
      create: {
        email: 'mike.wilson@example.com',
        name: '‡¶Æ‡¶æ‡¶á‡¶ï‡ßá‡¶≤ ‡¶ì‡¶Ø‡¶º‡¶æ‡¶π‡¶ø‡¶¶',
        image: 'https://placehold.co/100x100/EF4444/FFFFFF?text=MW'
      }
    }),
    prisma.user.upsert({
      where: { email: 'sarah.johnson@example.com' },
      update: {},
      create: {
        email: 'sarah.johnson@example.com',
        name: '‡¶∏‡¶æ‡¶∞‡¶æ ‡¶ú‡¶æ‡¶π‡¶æ‡¶®',
        image: 'https://placehold.co/100x100/8B5CF6/FFFFFF?text=SJ'
      }
    }),
    prisma.user.upsert({
      where: { email: 'alex.brown@example.com' },
      update: {},
      create: {
        email: 'alex.brown@example.com',
        name: '‡¶Ü‡¶≤‡ßá‡¶ï‡ßç‡¶∏ ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏',
        image: 'https://placehold.co/100x100/EC4899/FFFFFF?text=AB'
      }
    }),
    prisma.user.upsert({
      where: { email: 'lisa.davis@example.com' },
      update: {},
      create: {
        email: 'lisa.davis@example.com',
        name: '‡¶≤‡¶ø‡¶∏‡¶æ ‡¶¶‡¶§‡ßç‡¶§',
        image: 'https://placehold.co/100x100/06B6D4/FFFFFF?text=LD'
      }
    })
  ]);

  console.log('‚úÖ Created dummy users:', dummyUsers.map(u => u.name));

  // Create follow relationships - Main user follows more people
  const followRelationships = [
    // Others follow main user
    { followerId: dummyUsers[0].id, followingId: mainUser.id },
    { followerId: dummyUsers[1].id, followingId: mainUser.id },
    { followerId: dummyUsers[2].id, followingId: mainUser.id },
    { followerId: dummyUsers[3].id, followingId: mainUser.id },
    // Main user follows others (expanded)
    { followerId: mainUser.id, followingId: dummyUsers[0].id },
    { followerId: mainUser.id, followingId: dummyUsers[1].id },
    { followerId: mainUser.id, followingId: dummyUsers[2].id },
    { followerId: mainUser.id, followingId: dummyUsers[3].id },
    { followerId: mainUser.id, followingId: dummyUsers[4].id },
    { followerId: mainUser.id, followingId: dummyUsers[5].id },
    // Cross-follows between dummy users
    { followerId: dummyUsers[0].id, followingId: dummyUsers[1].id },
    { followerId: dummyUsers[1].id, followingId: dummyUsers[2].id },
    { followerId: dummyUsers[2].id, followingId: dummyUsers[3].id },
    { followerId: dummyUsers[3].id, followingId: dummyUsers[4].id },
    { followerId: dummyUsers[4].id, followingId: dummyUsers[5].id }
  ];

  for (const follow of followRelationships) {
    await prisma.follow.upsert({
      where: {
        followerId_followingId: {
          followerId: follow.followerId,
          followingId: follow.followingId
        }
      },
      update: {},
      create: follow
    });
  }

  console.log('‚úÖ Created follow relationships');

  // Create comprehensive events for the main user
  const events = [];
  
  const eventData = [
    {
      title: '‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶ï‡ßç‡¶ü ‡¶ì ‡¶®‡ßá‡¶ï‡ßç‡¶∏‡¶ü.‡¶ú‡ßá‡¶è‡¶∏ ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶∂‡¶™',
      description: '‡¶®‡ßá‡¶ï‡ßç‡¶∏‡¶ü.‡¶ú‡ßá‡¶è‡¶∏ ‡ßß‡ß´ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶ß‡ßÅ‡¶®‡¶ø‡¶ï ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶ï‡ßç‡¶ü ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∂‡¶ø‡¶ñ‡ßÅ‡¶®‡•§ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü, ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶∞‡¶æ‡¶â‡¶ü‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ï‡ßá‡¶≤‡ßá‡¶¨‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø‡¶∞ ‡¶∏‡ßá‡¶∞‡¶æ ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶≤‡ßã‡¶ö‡¶®‡¶æ ‡¶ï‡¶∞‡¶¨‡•§\n\n‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡¶æ ‡¶∂‡¶ø‡¶ñ‡¶¨‡ßá‡¶®:\n- ‡¶®‡ßá‡¶ï‡ßç‡¶∏‡¶ü.‡¶ú‡ßá‡¶è‡¶∏ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶∞‡¶æ‡¶â‡¶ü‡¶æ‡¶∞\n- ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü ‡¶¨‡¶®‡¶æ‡¶Æ ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü\n- ‡¶°‡ßá‡¶ü‡¶æ ‡¶´‡ßá‡¶ö‡¶ø‡¶Ç ‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡ßç‡¶®\n- ‡¶°‡¶ø‡¶™‡ßç‡¶≤‡¶Ø‡¶º‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡ßå‡¶∂‡¶≤\n\n‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡ßç‡¶Ø‡¶æ‡¶™‡¶ü‡¶™ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶∏‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßã‡¶°‡¶ø‡¶Ç‡¶Ø‡¶º‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶•‡¶æ‡¶ï‡ßÅ‡¶®!',
      location: '‡¶ü‡ßá‡¶ï ‡¶π‡¶æ‡¶¨, ‡¶¢‡¶æ‡¶ï‡¶æ',
      locationName: '‡¶ü‡ßá‡¶ï ‡¶π‡¶æ‡¶¨',
      locationAddress: '32-43 47th st, Astoria NY 11103',
      locationLat: 40.7614,
      locationLng: -73.9176,
      locationPlaceId: 'ChIJExample1',
      startDate: new Date('2024-02-15T10:00:00Z'),
      endDate: new Date('2024-02-15T16:00:00Z'),
      maxCapacity: 30,
      isPublic: true,
      status: 'ACTIVE',
      categoryIds: [categories[0].id], // Technology
      tagIds: [tags[0].id, tags[1].id, tags[3].id] // networking, beginner-friendly, workshop
    },
    {
      title: '‡¶ï‡¶Æ‡¶ø‡¶â‡¶®‡¶ø‡¶ü‡¶ø ‡¶´‡ßÅ‡¶ü‡¶¨‡¶≤ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö',
      description: '‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º ‡¶∏‡ßç‡¶ü‡ßá‡¶°‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ‡ßá ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶´‡ßÅ‡¶ü‡¶¨‡¶≤ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡¶®‡•§ ‡¶∏‡¶¨ ‡¶¶‡¶ï‡ßç‡¶∑‡¶§‡¶æ‡¶∞ ‡¶∏‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶ñ‡ßá‡¶≤‡ßã‡¶Ø‡¶º‡¶æ‡¶°‡¶º‡¶∞‡¶æ ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!\n\n‡¶ï‡ßÄ ‡¶Ü‡¶®‡¶¨‡ßá‡¶®:\n- ‡¶ñ‡ßá‡¶≤‡¶æ‡¶∞ ‡¶ú‡ßÅ‡¶§‡¶æ\n- ‡¶™‡¶æ‡¶®‡¶ø‡¶∞ ‡¶¨‡ßã‡¶§‡¶≤\n- ‡¶á‡¶§‡¶ø‡¶¨‡¶æ‡¶ö‡¶ï ‡¶Æ‡¶®‡ßã‡¶≠‡¶æ‡¶¨\n\n‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶¨‡¶≤ ‡¶∏‡¶∞‡¶¨‡¶∞‡¶æ‡¶π ‡¶ï‡¶∞‡¶¨ ‡¶è‡¶¨‡¶Ç ‡¶ò‡¶ü‡¶®‡¶æ‡¶∏‡ßç‡¶•‡¶≤‡ßá‡¶á ‡¶¶‡¶≤ ‡¶ó‡¶†‡¶® ‡¶ï‡¶∞‡¶¨‡•§',
      location: '‡¶ß‡¶æ‡¶®‡¶Æ‡¶®‡ßç‡¶°‡¶ø ‡¶∏‡ßç‡¶ü‡ßá‡¶°‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ, ‡¶¢‡¶æ‡¶ï‡¶æ',
      locationName: '‡¶ß‡¶æ‡¶®‡¶Æ‡¶®‡ßç‡¶°‡¶ø ‡¶∏‡ßç‡¶ü‡ßá‡¶°‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ',
      locationAddress: '32-43 47th st, Astoria NY 11103',
      locationLat: 40.7614,
      locationLng: -73.9176,
      locationPlaceId: 'ChIJExample2',
      startDate: new Date('2024-02-20T16:00:00Z'),
      endDate: new Date('2024-02-20T18:00:00Z'),
      maxCapacity: 22,
      isPublic: true,
      status: 'ACTIVE',
      categoryIds: [categories[1].id], // Sports
      tagIds: [tags[2].id, tags[4].id] // free, outdoor
    },
    {
      title: '‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü‡¶Ü‡¶™ ‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶ø‡¶Ç ‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ',
      description: '‡¶∏‡¶π ‡¶â‡¶¶‡ßç‡¶Ø‡ßã‡¶ï‡ßç‡¶§‡¶æ, ‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü‡¶Ü‡¶™ ‡¶â‡ßé‡¶∏‡¶æ‡¶π‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶ß‡¶æ‡¶∞‡¶£‡¶æ ‡¶≠‡¶æ‡¶ó‡¶æ‡¶≠‡¶æ‡¶ó‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶∏‡¶π-‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶§‡¶æ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶∞‡ßç‡¶•‡¶¨‡¶π ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n\n‡¶ï‡¶∞‡ßç‡¶Æ‡¶∏‡ßÇ‡¶ö‡¶ø:\n- ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§ ‡¶™‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º (‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ ‡ß¨:‡ß¶‡ß¶-‡ß¨:‡ß©‡ß¶)\n- ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶â‡¶™‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ (‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ ‡ß¨:‡ß©‡ß¶-‡ß≠:‡ß©‡ß¶)\n- ‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶ø‡¶Ç ‡¶∏‡ßá‡¶∂‡¶® (‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ ‡ß≠:‡ß©‡ß¶-‡ßØ:‡ß¶‡ß¶)\n- ‡¶∏‡¶Æ‡¶æ‡¶™‡¶®‡ßÄ ‡¶¨‡¶ï‡ßç‡¶§‡¶¨‡ßç‡¶Ø\n\n‡¶™‡ßã‡¶∂‡¶æ‡¶ï: ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ‡¶Ø‡¶º‡¶ø‡¶ï ‡¶®‡ßà‡¶Æ‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï',
      location: '‡¶ó‡ßÅ‡¶≤‡¶∂‡¶æ‡¶® ‡¶¨‡¶ø‡¶ú‡¶®‡ßá‡¶∏ ‡¶ï‡ßç‡¶≤‡¶æ‡¶¨',
      locationName: '‡¶ó‡ßÅ‡¶≤‡¶∂‡¶æ‡¶® ‡¶¨‡¶ø‡¶ú‡¶®‡ßá‡¶∏ ‡¶ï‡ßç‡¶≤‡¶æ‡¶¨',
      locationAddress: '32-43 47th st, Astoria NY 11103',
      locationLat: 40.7614,
      locationLng: -73.9176,
      locationPlaceId: 'ChIJExample3',
      startDate: new Date('2024-02-25T18:00:00Z'),
      endDate: new Date('2024-02-25T21:00:00Z'),
      maxCapacity: 50,
      isPublic: true,
      status: 'ACTIVE',
      categoryIds: [categories[2].id], // Social
      tagIds: [tags[0].id, tags[5].id] // networking, premium
    },
    {
      title: '‡¶´‡¶ü‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶´‡¶ø ‡¶Æ‡¶æ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡¶ï‡ßç‡¶≤‡¶æ‡¶∏',
      description: '‡¶™‡ßá‡¶∂‡¶æ‡¶¶‡¶æ‡¶∞ ‡¶´‡¶ü‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶´‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶∞‡¶æ ‡¶Ü‡¶π‡¶Æ‡ßá‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶´‡¶ü‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶´‡¶ø‡¶∞ ‡¶∂‡¶ø‡¶≤‡ßç‡¶™‡ßá ‡¶¶‡¶ï‡ßç‡¶∑‡¶§‡¶æ ‡¶Ö‡¶∞‡ßç‡¶ú‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶ú‡¶ø‡¶∂‡¶®, ‡¶Ü‡¶≤‡ßã ‡¶è‡¶¨‡¶Ç ‡¶™‡ßã‡¶∏‡ßç‡¶ü-‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶ï‡ßå‡¶∂‡¶≤ ‡¶∂‡¶ø‡¶ñ‡ßÅ‡¶®‡•§\n\n‡¶Ü‡¶≤‡ßã‡¶ö‡¶ø‡¶§ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º:\n- ‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ‡ßá‡¶∞‡¶æ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶è‡¶¨‡¶Ç ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶Æ‡ßã‡¶°\n- ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶ú‡¶ø‡¶∂‡¶®‡ßá‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßÉ‡¶ú‡¶®‡¶∂‡ßÄ‡¶≤ ‡¶ï‡ßå‡¶∂‡¶≤\n- ‡¶™‡ßç‡¶∞‡¶æ‡¶ï‡ßÉ‡¶§‡¶ø‡¶ï ‡¶Ü‡¶≤‡ßã ‡¶¨‡¶®‡¶æ‡¶Æ ‡¶ï‡ßÉ‡¶§‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ü‡¶≤‡ßã\n- ‡¶≤‡¶æ‡¶á‡¶ü‡¶∞‡ßÅ‡¶Æ‡ßá ‡¶Æ‡ßå‡¶≤‡¶ø‡¶ï ‡¶õ‡¶¨‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ\n\n‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ‡ßá‡¶∞‡¶æ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® (DSLR ‡¶¨‡¶æ ‡¶Æ‡¶ø‡¶∞‡¶∞‡¶≤‡ßá‡¶∏ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡¶®‡ßÄ‡¶Ø‡¶º)',
      location: '‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶ü‡¶ø‡¶≠ ‡¶Ü‡¶∞‡ßç‡¶ü‡¶∏ ‡¶∏‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞, ‡¶â‡¶§‡ßç‡¶§‡¶∞‡¶æ',
      locationName: '‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶ü‡¶ø‡¶≠ ‡¶Ü‡¶∞‡ßç‡¶ü‡¶∏ ‡¶∏‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞',
      locationAddress: '32-43 47th st, Astoria NY 11103',
      locationLat: 40.7614,
      locationLng: -73.9176,
      locationPlaceId: 'ChIJExample4',
      startDate: new Date('2024-03-05T14:00:00Z'),
      endDate: new Date('2024-03-05T17:00:00Z'),
      maxCapacity: 15,
      isPublic: true,
      status: 'ACTIVE',
      categoryIds: [categories[5].id], // Arts & Culture
      tagIds: [tags[3].id, tags[1].id] // workshop, beginner-friendly
    },
    {
      title: '‡¶¨‡¶æ‡¶ô‡¶æ‡¶≤‡¶ø ‡¶∞‡¶æ‡¶®‡ßç‡¶®‡¶æ‡¶∞ ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏',
      description: '‡¶∂‡ßá‡¶´ ‡¶∞‡¶π‡¶Æ‡¶æ‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ñ‡¶æ‡¶Å‡¶ü‡¶ø ‡¶¨‡¶æ‡¶ô‡¶æ‡¶≤‡¶ø ‡¶ñ‡¶æ‡¶¨‡¶æ‡¶∞ ‡¶∞‡¶æ‡¶®‡ßç‡¶®‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∂‡¶ø‡¶ñ‡ßÅ‡¶®‡•§ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ê‡¶§‡¶ø‡¶π‡ßç‡¶Ø‡¶¨‡¶æ‡¶π‡ßÄ ‡¶ñ‡¶æ‡¶¨‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶ï‡¶∞‡¶¨‡•§\n\n‡¶Æ‡ßá‡¶®‡ßÅ:\n- ‡¶á‡¶≤‡¶ø‡¶∂ ‡¶Æ‡¶æ‡¶õ‡ßá‡¶∞ ‡¶ù‡ßã‡¶≤\n- ‡¶≠‡¶æ‡¶™‡¶æ ‡¶≠‡¶æ‡¶§\n- ‡¶Ü‡¶≤‡ßÅ ‡¶™‡ßã‡¶∏‡ßç‡¶§\n- ‡¶Æ‡¶ø‡¶∑‡ßç‡¶ü‡¶ø ‡¶¶‡¶á\n\n‡¶∏‡¶¨ ‡¶â‡¶™‡¶ï‡¶∞‡¶£ ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶∞‡¶û‡ßç‡¶ú‡¶æ‡¶Æ ‡¶∏‡¶∞‡¶¨‡¶∞‡¶æ‡¶π ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§ ‡¶∞‡ßá‡¶∏‡¶ø‡¶™‡¶ø ‡¶ï‡¶æ‡¶∞‡ßç‡¶° ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶®!',
      location: '‡¶ï‡ßÅ‡¶≤‡¶ø‡¶®‡¶æ‡¶∞‡¶ø ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü, ‡¶ß‡¶æ‡¶®‡¶Æ‡¶®‡ßç‡¶°‡¶ø',
      locationName: '‡¶ï‡ßÅ‡¶≤‡¶ø‡¶®‡¶æ‡¶∞‡¶ø ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü',
      locationAddress: '32-43 47th st, Astoria NY 11103',
      locationLat: 40.7614,
      locationLng: -73.9176,
      locationPlaceId: 'ChIJExample5',
      startDate: new Date('2024-03-10T11:00:00Z'),
      endDate: new Date('2024-03-10T15:00:00Z'),
      maxCapacity: 12,
      isPublic: true,
      status: 'ACTIVE',
      categoryIds: [categories[4].id], // Food & Drink
      tagIds: [tags[3].id] // workshop
    },
    {
      title: '‡¶ï‡ßÉ‡¶§‡ßç‡¶∞‡¶ø‡¶Æ ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶§‡ßç‡¶§‡¶æ ‡¶ì ‡¶Æ‡ßá‡¶∂‡¶ø‡¶® ‡¶≤‡¶æ‡¶∞‡ßç‡¶®‡¶ø‡¶Ç ‡¶∏‡ßá‡¶Æ‡¶ø‡¶®‡¶æ‡¶∞',
      description: '‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶ú‡ßç‡¶û‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá AI ‡¶è‡¶¨‡¶Ç ML ‡¶è‡¶∞ ‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡¶ü‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶° ‡¶Ö‡¶®‡ßç‡¶¨‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶æ‡¶∞, ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡¶æ‡¶á‡¶®‡ßç‡¶ü‡¶ø‡¶∏‡ßç‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶â‡ßé‡¶∏‡¶æ‡¶π‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡•§\n\n‡¶¨‡¶ï‡ßç‡¶§‡¶æ‡¶ó‡¶£:\n- ‡¶°. ‡¶∞‡¶∂‡¶ø‡¶¶ ‡¶Ü‡¶π‡¶Æ‡ßá‡¶¶ (AI ‡¶ó‡¶¨‡ßá‡¶∑‡¶ï, ‡¶¨‡ßÅ‡¶Ø‡¶º‡ßá‡¶ü)\n- ‡¶´‡¶æ‡¶§‡¶ø‡¶Æ‡¶æ ‡¶ñ‡¶æ‡¶® (ML ‡¶á‡¶û‡ßç‡¶ú‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞, ‡¶ó‡ßÅ‡¶ó‡¶≤)\n- ‡¶Æ‡¶æ‡¶π‡¶Æ‡ßÅ‡¶¶ ‡¶π‡¶æ‡¶∏‡¶æ‡¶® (‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡¶æ‡¶á‡¶®‡ßç‡¶ü‡¶ø‡¶∏‡ßç‡¶ü, ‡¶™‡¶æ‡¶†‡¶æ‡¶ì)\n\n‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶∏‡¶Æ‡ßÇ‡¶π:\n- ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá AI ‡¶è‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ\n- ML ‡¶è ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó\n- TensorFlow ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶∏-‡¶Ö‡¶® ‡¶°‡ßá‡¶Æ‡ßã\n- ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßã‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶∞‡ßç‡¶¨',
      location: '‡¶¨‡ßÅ‡¶Ø‡¶º‡ßá‡¶ü ‡¶Ö‡¶°‡¶ø‡¶ü‡ßã‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ',
      locationName: '‡¶¨‡ßÅ‡¶Ø‡¶º‡ßá‡¶ü ‡¶Ö‡¶°‡¶ø‡¶ü‡ßã‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ',
      locationAddress: '32-43 47th st, Astoria NY 11103',
      locationLat: 40.7614,
      locationLng: -73.9176,
      locationPlaceId: 'ChIJExample6',
      startDate: new Date('2024-03-15T09:00:00Z'),
      endDate: new Date('2024-03-15T13:00:00Z'),
      maxCapacity: 100,
      isPublic: true,
      status: 'ACTIVE',
      categoryIds: [categories[0].id, categories[3].id], // Technology, Education
      tagIds: [tags[2].id, tags[0].id] // free, networking
    }
  ];

  for (let i = 0; i < eventData.length; i++) {
    const data = eventData[i];
    const event = await prisma.event.create({
      data: {
        title: data.title,
        description: data.description,
        location: data.location,
        locationName: data.locationName,
        locationAddress: data.locationAddress,
        locationLat: data.locationLat,
        locationLng: data.locationLng,
        locationPlaceId: data.locationPlaceId,
        startDate: data.startDate,
        endDate: data.endDate,
        maxCapacity: data.maxCapacity,
        isPublic: data.isPublic,
        status: data.status,
        creatorId: mainUser.id,
        categories: {
          create: data.categoryIds.map(categoryId => ({
            categoryId
          }))
        },
        tags: {
          create: data.tagIds.map(tagId => ({
            tagId
          }))
        }
      }
    });
    events.push(event);
  }

  console.log('‚úÖ Created events for main user:', events.map(e => e.title));

  // Create events by other users
  const otherUserEvents = [];
  
  const otherEventData = [
    {
      title: '‡¶∏‡¶ï‡¶æ‡¶≤‡ßá‡¶∞ ‡¶Ø‡ßã‡¶ó‡¶æ ‡¶∏‡ßá‡¶∂‡¶®',
      description: '‡¶™‡¶æ‡¶∞‡ßç‡¶ï‡ßá ‡¶∂‡¶æ‡¶®‡ßç‡¶§‡¶ø‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶Ø‡ßã‡¶ó‡¶æ ‡¶Ö‡¶≠‡ßç‡¶Ø‡¶æ‡¶∏‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶∏‡¶¨ ‡¶∏‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶Ö‡¶Ç‡¶∂‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞‡¶æ ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!\n\n‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ø‡¶æ ‡¶ï‡¶∞‡¶¨:\n- ‡¶Æ‡ßÉ‡¶¶‡ßÅ ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶Æ-‡¶Ü‡¶™ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶ö\n- ‡¶Æ‡ßå‡¶≤‡¶ø‡¶ï ‡¶Ø‡ßã‡¶ó‡¶æ‡¶∏‡¶®\n- ‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∂‡ßÄ‡¶≤‡¶®\n- ‡¶ß‡ßç‡¶Ø‡¶æ‡¶®\n\n‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶ø‡¶ú‡¶∏‡ßç‡¶¨ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶™‡¶æ‡¶®‡¶ø‡¶∞ ‡¶¨‡ßã‡¶§‡¶≤ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶∏‡ßÅ‡¶®‡•§',
      location: '‡¶∞‡¶Æ‡¶®‡¶æ ‡¶™‡¶æ‡¶∞‡ßç‡¶ï, ‡¶¢‡¶æ‡¶ï‡¶æ',
      locationName: '‡¶∞‡¶Æ‡¶®‡¶æ ‡¶™‡¶æ‡¶∞‡ßç‡¶ï',
      locationAddress: '32-43 47th st, Astoria NY 11103',
      locationLat: 40.7614,
      locationLng: -73.9176,
      locationPlaceId: 'ChIJExample7',
      startDate: new Date('2024-02-18T06:30:00Z'),
      endDate: new Date('2024-02-18T07:30:00Z'),
      maxCapacity: 20,
      isPublic: true,
      status: 'ACTIVE',
      creatorId: dummyUsers[0].id, // John Doe
      categoryIds: [categories[1].id], // Sports
      tagIds: [tags[2].id, tags[4].id, tags[1].id] // free, outdoor, beginner-friendly
    },
    {
      title: '‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡¶æ‡¶≤ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü‡¶ø‡¶Ç ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶∂‡¶™',
      description: '‡¶õ‡ßã‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü‡¶Ü‡¶™‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡¶æ‡¶≤ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü‡¶ø‡¶Ç‡¶Ø‡¶º‡ßá‡¶∞ ‡¶Æ‡ßå‡¶≤‡¶ø‡¶ï ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶∂‡¶ø‡¶ñ‡ßÅ‡¶®‡•§\n\n‡¶Ü‡¶≤‡ßã‡¶ö‡¶ø‡¶§ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º:\n- ‡¶∏‡ßã‡¶∂‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü‡¶ø‡¶Ç\n- ‡¶ó‡ßÅ‡¶ó‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶∏‡ßá‡¶∞ ‡¶Æ‡ßå‡¶≤‡¶ø‡¶ï ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º\n- ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü‡¶ø‡¶Ç\n- ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø‡¶ï‡ßç‡¶∏ ‡¶è‡¶¨‡¶Ç ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ø‡¶Ç\n- ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø‡¶∞ ‡¶ü‡¶ø‡¶™‡¶∏\n\n‡¶â‡¶¶‡ßç‡¶Ø‡ßã‡¶ï‡ßç‡¶§‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶ï‡¶æ‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡•§',
      location: '‡¶¨‡¶ø‡¶ú‡¶®‡ßá‡¶∏ ‡¶π‡¶æ‡¶¨, ‡¶ó‡ßÅ‡¶≤‡¶∂‡¶æ‡¶®',
      locationName: '‡¶¨‡¶ø‡¶ú‡¶®‡ßá‡¶∏ ‡¶π‡¶æ‡¶¨',
      locationAddress: '32-43 47th st, Astoria NY 11103',
      locationLat: 40.7614,
      locationLng: -73.9176,
      locationPlaceId: 'ChIJExample8',
      startDate: new Date('2024-02-22T14:00:00Z'),
      endDate: new Date('2024-02-22T17:00:00Z'),
      maxCapacity: 25,
      isPublic: true,
      status: 'ACTIVE',
      creatorId: dummyUsers[1].id, // Jane Smith
      categoryIds: [categories[0].id, categories[3].id], // Technology, Education
      tagIds: [tags[3].id, tags[0].id] // workshop, networking
    },
    {
      title: '‡¶∏‡¶æ‡¶™‡ßç‡¶§‡¶æ‡¶π‡¶ø‡¶ï ‡¶¨‡¶á ‡¶ï‡ßç‡¶≤‡¶æ‡¶¨ ‡¶Æ‡¶ø‡¶ü‡¶ø‡¶Ç',
      description: '‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶¨‡¶á ‡¶ï‡ßç‡¶≤‡¶æ‡¶¨ ‡¶Ü‡¶≤‡ßã‡¶ö‡¶®‡¶æ‡¶Ø‡¶º ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡¶®! ‡¶è‡¶á ‡¶Æ‡¶æ‡¶∏‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶™‡¶æ‡¶â‡¶≤‡ßã ‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶≤‡¶π‡ßã‡¶∞ "‡¶¶‡ßç‡¶Ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü" ‡¶™‡¶°‡¶º‡¶õ‡¶ø‡•§\n\n‡¶ï‡ßÄ ‡¶Ü‡¶∂‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®:\n- ‡¶¨‡¶á ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡¶≤‡¶ó‡¶§ ‡¶Ü‡¶≤‡ßã‡¶ö‡¶®‡¶æ\n- ‡¶ö‡¶∞‡¶ø‡¶§‡ßç‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£\n- ‡¶•‡¶ø‡¶Æ ‡¶Ö‡¶®‡ßç‡¶¨‡ßá‡¶∑‡¶£\n- ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶¨‡¶á ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®\n- ‡¶ö‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶®‡¶æ‡¶∏‡ßç‡¶§‡¶æ ‡¶∏‡¶∞‡¶¨‡¶∞‡¶æ‡¶π\n\n‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶Ç‡¶∂‡¶ó‡ßç‡¶∞‡¶π‡¶£‡ßá‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶¨‡¶á‡¶ü‡¶ø ‡¶™‡¶°‡¶º‡ßá ‡¶Ü‡¶∏‡ßÅ‡¶®‡•§',
      location: '‡¶ï‡ßç‡¶Ø‡¶æ‡¶´‡ßá ‡¶≤‡¶ø‡¶ü‡ßá‡¶∞‡¶æ‡¶ü‡¶ø, ‡¶ß‡¶æ‡¶®‡¶Æ‡¶®‡ßç‡¶°‡¶ø',
      locationName: '‡¶ï‡ßç‡¶Ø‡¶æ‡¶´‡ßá ‡¶≤‡¶ø‡¶ü‡ßá‡¶∞‡¶æ‡¶ü‡¶ø',
      locationAddress: '32-43 47th st, Astoria NY 11103',
      locationLat: 40.7614,
      locationLng: -73.9176,
      locationPlaceId: 'ChIJExample9',
      startDate: new Date('2024-02-24T15:00:00Z'),
      endDate: new Date('2024-02-24T17:00:00Z'),
      maxCapacity: 15,
      isPublic: true,
      status: 'ACTIVE',
      creatorId: dummyUsers[2].id, // Mike Wilson
      categoryIds: [categories[5].id], // Arts & Culture
      tagIds: [tags[2].id] // free
    },
    {
      title: '‡¶∏‡ßÅ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø‡¶ï‡¶∞ ‡¶∞‡¶æ‡¶®‡ßç‡¶®‡¶æ‡¶∞ ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶∂‡¶™',
      description: '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶∏‡ßç‡¶§ ‡¶ú‡ßÄ‡¶¨‡¶®‡¶Ø‡¶æ‡¶§‡ßç‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Æ‡¶æ‡¶®‡¶æ‡¶®‡¶∏‡¶á ‡¶™‡ßÅ‡¶∑‡ßç‡¶ü‡¶ø‡¶ï‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶¨‡¶æ‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ñ‡¶æ‡¶¨‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∂‡¶ø‡¶ñ‡ßÅ‡¶®‡•§\n\n‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶Æ‡ßá‡¶®‡ßÅ:\n- ‡¶ï‡¶ø‡¶®‡ßã‡¶Ø‡¶º‡¶æ ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß ‡¶¨‡ßã‡¶â‡¶≤\n- ‡¶∏‡¶¨‡ßÅ‡¶ú ‡¶∏‡ßç‡¶Æ‡ßÅ‡¶¶‡¶ø‡¶∞ ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶∞‡ßá‡¶∏‡¶ø‡¶™‡¶ø\n- ‡¶ì‡¶≠‡¶æ‡¶∞‡¶®‡¶æ‡¶á‡¶ü ‡¶ì‡¶ü‡¶∏\n- ‡¶∏‡ßÅ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø‡¶ï‡¶∞ ‡¶∏‡ßç‡¶®‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏ ‡¶Ö‡¶™‡¶∂‡¶®\n\n‡¶∏‡¶¨ ‡¶â‡¶™‡¶ï‡¶∞‡¶£ ‡¶∏‡¶∞‡¶¨‡¶∞‡¶æ‡¶π ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§ ‡¶∞‡ßá‡¶∏‡¶ø‡¶™‡¶ø ‡¶ï‡¶æ‡¶∞‡ßç‡¶° ‡¶è‡¶¨‡¶Ç ‡¶Æ‡¶ø‡¶≤ ‡¶™‡ßç‡¶∞‡ßá‡¶™ ‡¶ü‡¶ø‡¶™‡¶∏ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶®!',
      location: '‡¶ï‡ßÅ‡¶ï‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßÅ‡¶°‡¶ø‡¶ì, ‡¶â‡¶§‡ßç‡¶§‡¶∞‡¶æ',
      locationName: '‡¶ï‡ßÅ‡¶ï‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßÅ‡¶°‡¶ø‡¶ì',
      locationAddress: '32-43 47th st, Astoria NY 11103',
      locationLat: 40.7614,
      locationLng: -73.9176,
      locationPlaceId: 'ChIJExample10',
      startDate: new Date('2024-02-28T10:00:00Z'),
      endDate: new Date('2024-02-28T13:00:00Z'),
      maxCapacity: 12,
      isPublic: true,
      status: 'ACTIVE',
      creatorId: dummyUsers[3].id, // Sarah Johnson
      categoryIds: [categories[4].id], // Food & Drink
      tagIds: [tags[3].id, tags[1].id] // workshop, beginner-friendly
    },
    {
      title: '‡¶´‡ßç‡¶∞‡¶ø‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏‡¶æ‡¶∞ ‡¶Æ‡¶ø‡¶ü‡¶Ü‡¶™ ‡¶ì ‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶ø‡¶Ç',
      description: '‡¶∏‡¶π ‡¶´‡ßç‡¶∞‡¶ø‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏‡¶æ‡¶∞‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ ‡¶≠‡¶æ‡¶ó‡¶æ‡¶≠‡¶æ‡¶ó‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßá‡¶∂‡¶æ‡¶¶‡¶æ‡¶∞ ‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶ó‡¶°‡¶º‡ßá ‡¶§‡ßÅ‡¶≤‡ßÅ‡¶®‡•§\n\n‡¶ï‡¶∞‡ßç‡¶Æ‡¶∏‡ßÇ‡¶ö‡¶ø:\n- ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§ ‡¶ì ‡¶™‡¶∞‡¶ø‡¶ö‡¶Ø‡¶º\n- ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ü‡¶≤‡ßã‡¶ö‡¶®‡¶æ: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡ßç‡¶∞‡¶ø‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞"\n- ‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶ø‡¶Ç ‡¶∏‡ßá‡¶∂‡¶®\n- ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶≠‡¶æ‡¶ó‡¶æ‡¶≠‡¶æ‡¶ó‡¶ø\n- ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û ‡¶´‡ßç‡¶∞‡¶ø‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏‡¶æ‡¶∞‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßã‡¶§‡ßç‡¶§‡¶∞\n\n‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ‡¶Ø‡¶º‡¶ø‡¶ï ‡¶ï‡¶æ‡¶∞‡ßç‡¶° ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶∏‡ßÅ‡¶®!',
      location: '‡¶ï‡ßã-‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶ø‡¶Ç ‡¶∏‡ßç‡¶™‡ßá‡¶∏, ‡¶¨‡¶®‡¶æ‡¶®‡ßÄ',
      locationName: '‡¶ï‡ßã-‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶ø‡¶Ç ‡¶∏‡ßç‡¶™‡ßá‡¶∏',
      locationAddress: '32-43 47th st, Astoria NY 11103',
      locationLat: 40.7614,
      locationLng: -73.9176,
      locationPlaceId: 'ChIJExample11',
      startDate: new Date('2024-03-02T18:30:00Z'),
      endDate: new Date('2024-03-02T21:00:00Z'),
      maxCapacity: 40,
      isPublic: true,
      status: 'ACTIVE',
      creatorId: dummyUsers[4].id, // Alex Brown
      categoryIds: [categories[2].id], // Social
      tagIds: [tags[0].id, tags[2].id] // networking, free
    },
    {
      title: '‡¶∏‡¶æ‡¶™‡ßç‡¶§‡¶æ‡¶π‡¶ø‡¶ï ‡¶π‡¶æ‡¶á‡¶ï‡¶ø‡¶Ç ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶≠‡ßá‡¶û‡ßç‡¶ö‡¶æ‡¶∞',
      description: '‡¶π‡¶æ‡¶á‡¶ï‡¶ø‡¶Ç ‡¶â‡ßé‡¶∏‡¶æ‡¶π‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶¢‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶Ü‡¶∂‡ßá‡¶™‡¶æ‡¶∂‡ßá‡¶∞ ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ ‡¶ü‡ßç‡¶∞‡ßá‡¶á‡¶≤‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶Ö‡¶®‡ßç‡¶¨‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®!\n\n‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§:\n- ‡¶Æ‡¶ß‡ßç‡¶Ø‡¶Æ ‡¶Ö‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ‡¶∞ ‡¶∏‡ßç‡¶§‡¶∞\n- ‡¶¶‡ßÉ‡¶∂‡ßç‡¶Ø‡¶Æ‡¶æ‡¶® ‡¶¶‡ßÉ‡¶∂‡ßç‡¶Ø‡¶∏‡¶π ‡ß´ ‡¶ï‡¶ø‡¶Æ‡¶ø ‡¶ü‡ßç‡¶∞‡ßá‡¶á‡¶≤\n- ‡¶™‡ßá‡¶∂‡¶æ‡¶¶‡¶æ‡¶∞ ‡¶ó‡¶æ‡¶á‡¶° ‡¶Ö‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶≠‡ßÅ‡¶ï‡ßç‡¶§\n- ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶§‡ßç‡¶§‡¶æ ‡¶∏‡¶∞‡¶û‡ßç‡¶ú‡¶æ‡¶Æ ‡¶∏‡¶∞‡¶¨‡¶∞‡¶æ‡¶π\n- ‡¶¶‡ßÅ‡¶™‡ßÅ‡¶∞‡ßá‡¶∞ ‡¶ñ‡¶æ‡¶¨‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶™‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º ‡¶Ö‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶≠‡ßÅ‡¶ï‡ßç‡¶§\n\n‡¶Ü‡¶∞‡¶æ‡¶Æ‡¶¶‡¶æ‡¶Ø‡¶º‡¶ï ‡¶π‡¶æ‡¶á‡¶ï‡¶ø‡¶Ç ‡¶ú‡ßÅ‡¶§‡¶æ ‡¶™‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶™‡ßç‡¶Ø‡¶æ‡¶ï ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶∏‡ßÅ‡¶®‡•§',
      location: '‡¶∏‡¶æ‡¶≠‡¶æ‡¶∞ ‡¶™‡¶æ‡¶π‡¶æ‡¶°‡¶º, ‡¶¢‡¶æ‡¶ï‡¶æ',
      locationName: '‡¶∏‡¶æ‡¶≠‡¶æ‡¶∞ ‡¶™‡¶æ‡¶π‡¶æ‡¶°‡¶º',
      locationAddress: '32-43 47th st, Astoria NY 11103',
      locationLat: 40.7614,
      locationLng: -73.9176,
      locationPlaceId: 'ChIJExample12',
      startDate: new Date('2024-03-09T07:00:00Z'),
      endDate: new Date('2024-03-09T15:00:00Z'),
      maxCapacity: 18,
      isPublic: true,
      status: 'ACTIVE',
      creatorId: dummyUsers[5].id, // Lisa Davis
      categoryIds: [categories[1].id], // Sports
      tagIds: [tags[4].id] // outdoor
    }
  ];

  for (let i = 0; i < otherEventData.length; i++) {
    const data = otherEventData[i];
    const event = await prisma.event.create({
      data: {
        title: data.title,
        description: data.description,
        location: data.location,
        locationName: data.locationName,
        locationAddress: data.locationAddress,
        locationLat: data.locationLat,
        locationLng: data.locationLng,
        locationPlaceId: data.locationPlaceId,
        startDate: data.startDate,
        endDate: data.endDate,
        maxCapacity: data.maxCapacity,
        isPublic: data.isPublic,
        status: data.status,
        creatorId: data.creatorId,
        categories: {
          create: data.categoryIds.map(categoryId => ({
            categoryId
          }))
        },
        tags: {
          create: data.tagIds.map(tagId => ({
            tagId
          }))
        }
      }
    });
    otherUserEvents.push(event);
  }

  console.log('‚úÖ Created events by other users:', otherUserEvents.map(e => e.title));

  // Add event participants for main user's events
  const participantData = [
    { eventIndex: 0, userIds: [dummyUsers[0].id, dummyUsers[1].id, dummyUsers[2].id, dummyUsers[3].id] },
    { eventIndex: 1, userIds: [dummyUsers[1].id, dummyUsers[2].id, dummyUsers[4].id] },
    { eventIndex: 2, userIds: [dummyUsers[0].id, dummyUsers[3].id, dummyUsers[4].id, dummyUsers[5].id] },
    { eventIndex: 3, userIds: [dummyUsers[1].id, dummyUsers[5].id] },
    { eventIndex: 4, userIds: [dummyUsers[0].id, dummyUsers[2].id, dummyUsers[4].id] },
    { eventIndex: 5, userIds: [dummyUsers[0].id, dummyUsers[1].id, dummyUsers[2].id, dummyUsers[3].id, dummyUsers[4].id] }
  ];

  for (const { eventIndex, userIds } of participantData) {
    for (const userId of userIds) {
      await prisma.eventParticipant.create({
        data: {
          eventId: events[eventIndex].id,
          userId,
          status: 'JOINED',
          joinedAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000) // Random time in last 7 days
        }
      });
    }
  }

  // Add participants to other users' events (including main user joining some)
  const otherEventParticipants = [
    { eventIndex: 0, userIds: [mainUser.id, dummyUsers[1].id, dummyUsers[2].id, dummyUsers[3].id] }, // Yoga - Main user joins
    { eventIndex: 1, userIds: [mainUser.id, dummyUsers[0].id, dummyUsers[2].id, dummyUsers[4].id] }, // Marketing - Main user joins
    { eventIndex: 2, userIds: [dummyUsers[0].id, dummyUsers[3].id, dummyUsers[4].id] }, // Book Club - Main user doesn't join
    { eventIndex: 3, userIds: [mainUser.id, dummyUsers[1].id, dummyUsers[4].id, dummyUsers[5].id] }, // Cooking - Main user joins
    { eventIndex: 4, userIds: [dummyUsers[0].id, dummyUsers[1].id, dummyUsers[2].id, dummyUsers[3].id] }, // Freelancer - Main user doesn't join
    { eventIndex: 5, userIds: [mainUser.id, dummyUsers[0].id, dummyUsers[1].id, dummyUsers[3].id] } // Hiking - Main user joins
  ];

  for (const { eventIndex, userIds } of otherEventParticipants) {
    for (const userId of userIds) {
      await prisma.eventParticipant.create({
        data: {
          eventId: otherUserEvents[eventIndex].id,
          userId,
          status: 'JOINED',
          joinedAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000) // Random time in last 7 days
        }
      });
    }
  }

  console.log('‚úÖ Added event participants');

  // Add images to all events (main user's events and other users' events)
  const allEvents = [...events, ...otherUserEvents];
  for (let i = 0; i < allEvents.length; i++) {
    const event = allEvents[i];
    const imageCount = Math.floor(Math.random() * 4) + 2; // 2-5 images per event
    
    for (let j = 0; j < imageCount; j++) {
      const imageData = generateRandomImage();
      await prisma.eventImage.create({
        data: {
          eventId: event.id,
          url: imageData.url,
          width: imageData.width,
          height: imageData.height,
          altText: `${event.title} - Image ${j + 1}`,
          caption: j === 0 ? 'Main event photo' : `Event moment ${j + 1}`,
          order: j
        }
      });
    }
  }

  console.log('‚úÖ Added event images to all events');

  // Add comments to events
  const commentTexts = [
    "‡¶è‡¶ü‡¶æ ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶Ö‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶≤‡¶æ‡¶ó‡¶õ‡ßá! ‡¶Ö‡¶Ç‡¶∂‡¶ó‡ßç‡¶∞‡¶π‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ‡¶Ø‡¶º ‡¶∞‡¶á‡¶≤‡¶æ‡¶Æ üéâ",
    "‡¶¶‡ßÅ‡¶∞‡ßç‡¶¶‡¶æ‡¶®‡ßç‡¶§ ‡¶â‡¶¶‡ßç‡¶Ø‡ßã‡¶ó! ‡¶è‡¶ü‡¶ø ‡¶Ü‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶‡•§",
    "‡¶è‡¶á ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶∂‡¶∞‡ßç‡¶§ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø?",
    "‡¶Ü‡¶Æ‡¶ø ‡¶ó‡¶§ ‡¶¨‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∑‡ßç‡¶†‡¶æ‡¶®‡ßá ‡¶ó‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡¶ø‡¶≤‡¶æ‡¶Æ ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ü‡¶ø ‡¶ö‡¶Æ‡ßé‡¶ï‡¶æ‡¶∞ ‡¶õ‡¶ø‡¶≤!",
    "‡¶®‡¶ø‡¶ñ‡ßÅ‡¶Å‡¶§ ‡¶∏‡¶Æ‡¶Ø‡¶º, ‡¶Ü‡¶Æ‡¶ø ‡¶†‡¶ø‡¶ï ‡¶è‡¶∞‡¶ï‡¶Æ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡¶ø‡¶≤‡¶æ‡¶Æ‡•§",
    "‡¶≠‡ßá‡¶®‡ßç‡¶Ø‡ßÅ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßç‡¶ï‡¶ø‡¶Ç ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø?",
    "‡¶¨‡¶∞‡ßç‡¶£‡¶®‡¶æ‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶¨‡¶á ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡ßÉ‡¶§ ‡¶∂‡ßã‡¶®‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡•§ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶™‡¶∞‡¶ø‡¶ï‡¶≤‡ßç‡¶™‡¶®‡¶æ!",
    "‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶ó‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®! ‡¶è‡¶ü‡¶ø ‡¶†‡¶ø‡¶ï ‡¶Ø‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶õ‡¶ø‡¶≤‡•§",
    "‡¶ï‡ßã‡¶®‡ßã ‡¶´‡¶≤‡ßã-‡¶Ü‡¶™ ‡¶∏‡ßá‡¶∂‡¶® ‡¶•‡¶æ‡¶ï‡¶¨‡ßá ‡¶ï‡¶ø?",
    "‡¶è‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶®‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶!",
    "‡¶≠‡ßá‡¶®‡ßç‡¶Ø‡ßÅ‡¶ü‡¶ø ‡¶è‡¶á ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶ñ‡ßÅ‡¶Å‡¶§ ‡¶Æ‡¶®‡ßá ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§",
    "‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶ï‡ßá ‡¶∏‡¶æ‡¶•‡ßá ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶∏‡¶õ‡¶ø‡•§ ‡¶Ü‡¶∂‡¶æ ‡¶ï‡¶∞‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶®‡ßá‡¶á!",
    "‡¶è‡¶ü‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡¶¨‡¶æ‡¶∞ ‡¶Ö‡¶Ç‡¶∂‡¶ó‡ßç‡¶∞‡¶π‡¶£‡•§ ‡¶ï‡ßã‡¶®‡ßã ‡¶ü‡¶ø‡¶™‡¶∏ ‡¶Ü‡¶õ‡ßá?",
    "‡¶ï‡¶∞‡ßç‡¶Æ‡¶∏‡ßÇ‡¶ö‡¶ø‡¶ü‡¶ø ‡¶∏‡ßÅ‡¶∏‡¶Ç‡¶ó‡¶†‡¶ø‡¶§ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡•§ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶ï‡¶æ‡¶ú!",
    "‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶ø‡¶Ç ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶â‡¶®‡ßç‡¶Æ‡ßÅ‡¶ñ ‡¶π‡¶Ø‡¶º‡ßá ‡¶Ü‡¶õ‡¶ø!"
  ];

  // Add comments to all events (including main user commenting on others' events)
  const allUsers = [mainUser, ...dummyUsers];
  
  for (let i = 0; i < allEvents.length; i++) {
    const event = allEvents[i];
    const commentCount = Math.floor(Math.random() * 8) + 3; // 3-10 comments per event
    
    for (let j = 0; j < commentCount; j++) {
      const randomUser = allUsers[Math.floor(Math.random() * allUsers.length)];
      const randomText = commentTexts[Math.floor(Math.random() * commentTexts.length)];
      
      const comment = await prisma.comment.create({
        data: {
          eventId: event.id,
          authorId: randomUser.id,
          content: randomText,
          createdAt: new Date(Date.now() - Math.random() * 14 * 24 * 60 * 60 * 1000) // Random time in last 14 days
        }
      });

      // Add random likes to comments (including main user liking comments)
      const likeCount = Math.floor(Math.random() * 4); // 0-3 likes per comment
      const likers = allUsers.slice(0, likeCount);
      
      for (const liker of likers) {
        if (liker.id !== randomUser.id) { // Don't let users like their own comments
          await prisma.commentLike.create({
            data: {
              commentId: comment.id,
              userId: liker.id,
              createdAt: new Date(comment.createdAt.getTime() + Math.random() * 24 * 60 * 60 * 1000) // Like after comment
            }
          });
        }
      }
    }
  }

  console.log('‚úÖ Added comments and likes');

  console.log('üéâ Seed completed successfully!');
  console.log(`
üìä Summary:
- Categories: ${categories.length}
- Tags: ${tags.length}
- Users: ${dummyUsers.length + 1} (including main user)
- Events: ${allEvents.length} (${events.length} by main user + ${otherUserEvents.length} by others)
- Follow relationships: ${followRelationships.length}
- Images: ~${allEvents.length * 3} (2-5 per event)
- Comments: ~${allEvents.length * 6} (3-10 per event)
- Comment likes: Various per comment

üéØ Main user: ${mainUser.name} (${mainUser.email})
- Follows: ${followRelationships.filter(f => f.followerId === mainUser.id).length} users
- Followers: ${followRelationships.filter(f => f.followingId === mainUser.id).length} users
- Created events: ${events.length}
- Joined events: 4 (Yoga, Marketing, Cooking, Hiking)
  `);
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
