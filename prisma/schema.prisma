// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // Event relations
  createdEvents  Event[]            @relation("CreatedEvents")
  participations EventParticipant[] @relation("EventParticipations")

  // Comment relations
  comments     Comment[]     @relation("UserComments")
  commentLikes CommentLike[] @relation("UserCommentLikes")

  // Follow relations
  following Follow[] @relation("Follower")
  followers Follow[] @relation("Following")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Event Management System
model Event {
  id              String      @id @default(cuid())
  title           String
  description     String?     @db.Text
  location        String? // Legacy field for backward compatibility
  locationName    String? // Human-readable location name
  locationAddress String? // Full formatted address from Google Places
  locationLat     Float? // Latitude
  locationLng     Float? // Longitude
  locationPlaceId String? // Google Places ID for future reference
  startDate       DateTime
  endDate         DateTime?
  maxCapacity     Int? // null = unlimited
  isPublic        Boolean     @default(true)
  status          EventStatus @default(ACTIVE)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  creatorId String
  creator   User   @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: Cascade)

  participants EventParticipant[]
  categories   EventCategory[]
  tags         EventTag[]
  images       EventImage[]
  comments     Comment[]

  @@index([creatorId])
  @@index([startDate])
  @@index([status])
}

model EventParticipant {
  id       String            @id @default(cuid())
  status   ParticipantStatus @default(JOINED)
  joinedAt DateTime          @default(now())
  leftAt   DateTime?

  // Relations
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId  String
  user    User   @relation("EventParticipations", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId]) // Prevent duplicate participations
  @@index([userId])
  @@index([eventId])
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  color       String? // For UI theming
  icon        String? // Icon identifier

  createdAt DateTime @default(now())

  events EventCategory[]
}

model EventCategory {
  eventId    String
  categoryId String

  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([eventId, categoryId])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())

  events EventTag[]
}

model EventTag {
  eventId String
  tagId   String

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([eventId, tagId])
}

model EventImage {
  id        String   @id @default(cuid())
  url       String
  altText   String?
  caption   String?
  order     Int      @default(0) // For ordering images in carousel
  width     Int?
  height    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([eventId, order]) // For efficient ordering queries
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  authorId String
  author   User   @relation("UserComments", fields: [authorId], references: [id], onDelete: Cascade)

  likes CommentLike[]

  @@index([eventId])
  @@index([authorId])
  @@index([eventId, createdAt]) // For efficient chronological ordering
}

model CommentLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation("UserCommentLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId]) // Prevent duplicate likes
  @@index([commentId])
  @@index([userId])
}

// Enums
enum EventStatus {
  DRAFT
  ACTIVE
  CANCELLED
  COMPLETED
}

enum ParticipantStatus {
  JOINED
  LEFT
  KICKED
  INVITED
}

// Follow System
model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}
